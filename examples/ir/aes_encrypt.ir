def main (aes_key:i128, aes_plaintext:i128, aes_reset:bool) -> (aes_ciphertext:i128, ready:bool) {
    t0:bool = const[0];
    t1:bool = const[1];
    t2:i4 = const[0];
    t3:i4 = const[10];
    t4:i4 = const[9];
    t5:i4 = const[10];
    aes_ciphertext:i128 = id(t6);
    t8:i4 = reg[0](t7, t1);
    ready:bool = id(t9);
    t6:i128 = reg[0](t10, t1);
    t12:i128 = reg[0](t11, t1);
    t13:i8 = ext[0,7](t6);
    t14:i8 = ext[8,15](t6);
    t15:i8 = ext[16,23](t6);
    t16:i8 = ext[24,31](t6);
    t17:i8 = ext[32,39](t6);
    t18:i8 = ext[40,47](t6);
    t19:i8 = ext[48,55](t6);
    t20:i8 = ext[56,63](t6);
    t21:i8 = ext[64,71](t6);
    t22:i8 = ext[72,79](t6);
    t23:i8 = ext[80,87](t6);
    t24:i8 = ext[88,95](t6);
    t25:i8 = ext[96,103](t6);
    t26:i8 = ext[104,111](t6);
    t27:i8 = ext[112,119](t6);
    t28:i8 = ext[120,127](t6);
    t29:i8 = rom(t28);
    t30:i8 = rom(t27);
    t31:i8 = rom(t26);
    t32:i8 = rom(t25);
    t33:i8 = rom(t24);
    t34:i8 = rom(t23);
    t35:i8 = rom(t22);
    t36:i8 = rom(t21);
    t37:i8 = rom(t20);
    t38:i8 = rom(t19);
    t39:i8 = rom(t18);
    t40:i8 = rom(t17);
    t41:i8 = rom(t16);
    t42:i8 = rom(t15);
    t43:i8 = rom(t14);
    t44:i8 = rom(t13);
    t45:i128 = cat(t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44);
    t46:i8 = ext[0,7](t45);
    t47:i8 = ext[8,15](t45);
    t48:i8 = ext[16,23](t45);
    t49:i8 = ext[24,31](t45);
    t50:i8 = ext[32,39](t45);
    t51:i8 = ext[40,47](t45);
    t52:i8 = ext[48,55](t45);
    t53:i8 = ext[56,63](t45);
    t54:i8 = ext[64,71](t45);
    t55:i8 = ext[72,79](t45);
    t56:i8 = ext[80,87](t45);
    t57:i8 = ext[88,95](t45);
    t58:i8 = ext[96,103](t45);
    t59:i8 = ext[104,111](t45);
    t60:i8 = ext[112,119](t45);
    t61:i8 = ext[120,127](t45);
    t62:i128 = cat(t61, t56, t51, t46, t57, t52, t47, t58, t53, t48, t59, t54, t49, t60, t55, t50);
    t63:i32 = ext[0,31](t62);
    t64:i32 = ext[32,63](t62);
    t65:i32 = ext[64,95](t62);
    t66:i32 = ext[96,127](t62);
    t67:i8 = ext[0,7](t63);
    t68:i8 = ext[8,15](t63);
    t69:i8 = ext[16,23](t63);
    t70:i8 = ext[24,31](t63);
    t71:i8 = rom(t67);
    t72:i8 = xor(t71, t68);
    t73:i8 = xor(t72, t69);
    t74:i8 = rom(t70);
    t75:i8 = xor(t73, t74);
    t76:i8 = rom(t68);
    t77:i8 = xor(t76, t69);
    t78:i8 = xor(t77, t70);
    t79:i8 = rom(t67);
    t80:i8 = xor(t78, t79);
    t81:i8 = rom(t69);
    t82:i8 = xor(t81, t70);
    t83:i8 = xor(t82, t67);
    t84:i8 = rom(t68);
    t85:i8 = xor(t83, t84);
    t86:i8 = rom(t70);
    t87:i8 = xor(t86, t67);
    t88:i8 = xor(t87, t68);
    t89:i8 = rom(t69);
    t90:i8 = xor(t88, t89);
    t91:i32 = cat(t90, t85, t80, t75);
    t92:i8 = ext[0,7](t64);
    t93:i8 = ext[8,15](t64);
    t94:i8 = ext[16,23](t64);
    t95:i8 = ext[24,31](t64);
    t96:i8 = rom(t92);
    t97:i8 = xor(t96, t93);
    t98:i8 = xor(t97, t94);
    t99:i8 = rom(t95);
    t100:i8 = xor(t98, t99);
    t101:i8 = rom(t93);
    t102:i8 = xor(t101, t94);
    t103:i8 = xor(t102, t95);
    t104:i8 = rom(t92);
    t105:i8 = xor(t103, t104);
    t106:i8 = rom(t94);
    t107:i8 = xor(t106, t95);
    t108:i8 = xor(t107, t92);
    t109:i8 = rom(t93);
    t110:i8 = xor(t108, t109);
    t111:i8 = rom(t95);
    t112:i8 = xor(t111, t92);
    t113:i8 = xor(t112, t93);
    t114:i8 = rom(t94);
    t115:i8 = xor(t113, t114);
    t116:i32 = cat(t115, t110, t105, t100);
    t117:i8 = ext[0,7](t65);
    t118:i8 = ext[8,15](t65);
    t119:i8 = ext[16,23](t65);
    t120:i8 = ext[24,31](t65);
    t121:i8 = rom(t117);
    t122:i8 = xor(t121, t118);
    t123:i8 = xor(t122, t119);
    t124:i8 = rom(t120);
    t125:i8 = xor(t123, t124);
    t126:i8 = rom(t118);
    t127:i8 = xor(t126, t119);
    t128:i8 = xor(t127, t120);
    t129:i8 = rom(t117);
    t130:i8 = xor(t128, t129);
    t131:i8 = rom(t119);
    t132:i8 = xor(t131, t120);
    t133:i8 = xor(t132, t117);
    t134:i8 = rom(t118);
    t135:i8 = xor(t133, t134);
    t136:i8 = rom(t120);
    t137:i8 = xor(t136, t117);
    t138:i8 = xor(t137, t118);
    t139:i8 = rom(t119);
    t140:i8 = xor(t138, t139);
    t141:i32 = cat(t140, t135, t130, t125);
    t142:i8 = ext[0,7](t66);
    t143:i8 = ext[8,15](t66);
    t144:i8 = ext[16,23](t66);
    t145:i8 = ext[24,31](t66);
    t146:i8 = rom(t142);
    t147:i8 = xor(t146, t143);
    t148:i8 = xor(t147, t144);
    t149:i8 = rom(t145);
    t150:i8 = xor(t148, t149);
    t151:i8 = rom(t143);
    t152:i8 = xor(t151, t144);
    t153:i8 = xor(t152, t145);
    t154:i8 = rom(t142);
    t155:i8 = xor(t153, t154);
    t156:i8 = rom(t144);
    t157:i8 = xor(t156, t145);
    t158:i8 = xor(t157, t142);
    t159:i8 = rom(t143);
    t160:i8 = xor(t158, t159);
    t161:i8 = rom(t145);
    t162:i8 = xor(t161, t142);
    t163:i8 = xor(t162, t143);
    t164:i8 = rom(t144);
    t165:i8 = xor(t163, t164);
    t166:i32 = cat(t165, t160, t155, t150);
    t167:i128 = cat(t166, t141, t116, t91);
    t168:i32 = ext[0,31](t12);
    t169:i32 = ext[32,63](t12);
    t170:i32 = ext[64,95](t12);
    t171:i32 = ext[96,127](t12);
    t172:i8 = ext[0,7](t168);
    t173:i8 = ext[8,15](t168);
    t174:i8 = ext[16,23](t168);
    t175:i8 = ext[24,31](t168);
    t176:i3 = const[0];
    t177:i4 = cat(t176, t1);
    t178:i4 = add(t8, t177);
    t179:i4 = const[0];
    t180:i8 = cat(t179, t178);
    t181:i8 = rom(t174);
    t182:i8 = rom(t180);
    t183:i8 = xor(t181, t182);
    t184:i8 = rom(t173);
    t185:i8 = rom(t172);
    t186:i8 = rom(t175);
    t187:i32 = cat(t183, t184, t185, t186);
    t188:i32 = xor(t171, t187);
    t189:i32 = xor(t188, t170);
    t190:i32 = xor(t189, t169);
    t191:i32 = xor(t190, t168);
    t192:i128 = cat(t188, t189, t190, t191);
    t195:i128 = xor(t193, t194);
    t196:bool = eq(aes_reset, t1);
    t198:bool = and(t197, t9);
    t200:bool = and(t197, t199);
    t199:bool = not(t9);
    t201:bool = eq(t8, t4);
    t197:bool = not(t196);
    t202:bool = and(t200, t201);
    t203:bool = not(t201);
    t204:bool = and(t200, t203);
    t205:i4 = cat(t176, t0);
    t206:i4 = mux(t196, t2, t205);
    t207:i4 = mux(t198, t8, t206);
    t7:i4 = mux(t200, t178, t207);
    t209:i128 = mux(t196, aes_key, t208);
    t194:i128 = mux(t200, t192, t209);
    t210:i128 = mux(t196, t195, t6);
    t211:i128 = mux(t198, t6, t210);
    t10:i128 = mux(t200, t195, t211);
    t212:i128 = mux(t196, aes_key, t12);
    t11:i128 = mux(t200, t192, t212);
    t213:i127 = const[0];
    t208:i128 = cat(t213, t0);
    t214:i128 = mux(t196, aes_plaintext, t208);
    t215:i128 = mux(t202, t62, t214);
    t193:i128 = mux(t204, t167, t215);
    t9:bool = eq(t8, t5);
}
